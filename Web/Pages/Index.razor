@page "/"

@inject Application.DataService dataService

<PageTitle>Auto Generated Docker Proxies</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Auto Generated Docker Proxies</MudText>

<MudDataGrid T="data" Items="GetList()" Groupable="true" Filterable="true">
    <Columns>
        <PropertyColumn Property="p=>p.Endpoint" />
        <TemplateColumn GroupBy="q=>q.DnsName" Title="DnsName" SortBy="s=>s.DnsName">
            <CellTemplate>
                <MudLink Href="@context.Item.DnsName" Target="_blank">@context.Item.DnsName</MudLink>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn GroupBy="q=>q.Target" Title="Target" SortBy="s=>s.Target">
            <CellTemplate>
                <MudLink Href="@context.Item.Target" Target="_blank">@context.Item.Target</MudLink>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>


@code {
    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
        dataService.Updated += async () => await InvokeAsync(StateHasChanged);
    }

    public class data
    {
        public string Endpoint { get; set; }
        public string DnsName { get; set; }
        public string Target { get; set; }
    }

    List<data> GetList()
    {
        List<data> r = new();
        foreach (var container in dataService.CaddyContainers)
        {
            foreach (var proxy in container.ProxyAddresses)
            {
                r.Add(new data()
                    {
                        DnsName = $"https://{proxy.DNSName}",
                        Target = $"http://{proxy.TargetHostName}:{proxy.TargetPort}",
                        Endpoint = container.Name
                    });
            }
        }
        return r;

    }
}